{"ast":null,"code":"import { environment } from './../../../../environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TrackService {\n  constructor(httpClient) {\n    this.httpClient = httpClient;\n    this.URL = environment.api;\n  }\n  getAllTracks$() {}\n}\nTrackService.ɵfac = function TrackService_Factory(t) {\n  return new (t || TrackService)(i0.ɵɵinject(i1.HttpClient));\n};\nTrackService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TrackService,\n  factory: TrackService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","TrackService","constructor","httpClient","URL","api","getAllTracks$","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["c:\\angular\\spotify\\src\\app\\modules\\tracks\\services\\track.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { TrackModel } from '@core/models/tracks.model';\nimport { Observable, of } from 'rxjs';\nimport { environment } from './../../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TrackService {\n\n  private readonly URL = environment.api;\n\n  constructor(private httpClient: HttpClient) { \n\n  }\n\n  getAllTracks$():Observable{\n\n\n  }\n}\n"],"mappings":"AAIA,SAASA,WAAW,QAAQ,wCAAwC;;;AAKpE,OAAM,MAAOC,YAAY;EAIvBC,YAAoBC,UAAsB;IAAtB,KAAAA,UAAU,GAAVA,UAAU;IAFb,KAAAC,GAAG,GAAGJ,WAAW,CAACK,GAAG;EAItC;EAEAC,aAAaA,CAAA,GAGb;;AAXWL,YAAY,C;mBAAZA,YAAY,EAAAM,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZT,YAAY,C;SAAZA,YAAY;EAAAU,OAAA,EAAZV,YAAY,CAAAW,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}