{"ast":null,"code":"import { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TrackService {\n  constructor(http) {\n    this.http = http;\n    this.URL = environment.api;\n  }\n  getAllTracks$() {\n    return this.http.get(`${this.URL}/tracks`).pipe(map(({\n      data\n    }) => {\n      return data;\n    }));\n  }\n  getAllRandom$() {\n    return this.http.get(`${this.URL}/tracks`).pipe(map(({\n      data\n    }) => {\n      return data.reverse();\n    }), map(({\n      dataRevertida\n    }) => {\n      return dataRevertida.filter(track => track._id !== 1);\n    }));\n  }\n}\nTrackService.ɵfac = function TrackService_Factory(t) {\n  return new (t || TrackService)(i0.ɵɵinject(i1.HttpClient));\n};\nTrackService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: TrackService,\n  factory: TrackService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["environment","map","TrackService","constructor","http","URL","api","getAllTracks$","get","pipe","data","getAllRandom$","reverse","dataRevertida","filter","track","_id","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["c:\\angular\\spotify\\src\\app\\modules\\tracks\\services\\track.service.ts"],"sourcesContent":["\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { map } from 'rxjs/operators';\nimport { TrackModel } from '@core/models/tracks.model';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class TrackService {\n  private readonly URL = environment.api\n  constructor(private http: HttpClient) { \n\n  }\n\n  getAllTracks$(): Observable<any> {\n    return this.http.get(`${this.URL}/tracks`)\n    .pipe(\n      map(({data}:any)=>{\n        return data\n      }\n    )\n    )\n  }\n  getAllRandom$(): Observable<any> {\n    return this.http.get(`${this.URL}/tracks`)\n    .pipe(\n        map(({data}:any)=>{\n          return data.reverse()\n        }\n      ),\n      map(({dataRevertida}:any)=>{\n        return dataRevertida.filter((track:TrackModel)=>track._id!==1)\n        }\n      )\n    )\n  }\n}\n"],"mappings":"AAIA,SAASA,WAAW,QAAQ,8BAA8B;AAC1D,SAASC,GAAG,QAAQ,gBAAgB;;;AAOpC,OAAM,MAAOC,YAAY;EAEvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IADP,KAAAC,GAAG,GAAGL,WAAW,CAACM,GAAG;EAGtC;EAEAC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACH,IAAI,CAACI,GAAG,CAAC,GAAG,IAAI,CAACH,GAAG,SAAS,CAAC,CACzCI,IAAI,CACHR,GAAG,CAAC,CAAC;MAACS;IAAI,CAAK,KAAG;MAChB,OAAOA,IAAI;IACb,CAAC,CACF,CACA;EACH;EACAC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACP,IAAI,CAACI,GAAG,CAAC,GAAG,IAAI,CAACH,GAAG,SAAS,CAAC,CACzCI,IAAI,CACDR,GAAG,CAAC,CAAC;MAACS;IAAI,CAAK,KAAG;MAChB,OAAOA,IAAI,CAACE,OAAO,EAAE;IACvB,CAAC,CACF,EACDX,GAAG,CAAC,CAAC;MAACY;IAAa,CAAK,KAAG;MACzB,OAAOA,aAAa,CAACC,MAAM,CAAEC,KAAgB,IAAGA,KAAK,CAACC,GAAG,KAAG,CAAC,CAAC;IAC9D,CAAC,CACF,CACF;EACH;;AA3BWd,YAAY,C;mBAAZA,YAAY,EAAAe,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZlB,YAAY,C;SAAZA,YAAY;EAAAmB,OAAA,EAAZnB,YAAY,CAAAoB,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}