{"ast":null,"code":"import { of } from 'rxjs';\nimport { map, mergeMap, catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class TrackService {\n  constructor(http) {\n    this.http = http;\n    this.URL = environment.api;\n  }\n  /**\n   *\n   * @returns Devolver todas las canciones! molonas! ðŸ¤˜ðŸ¤˜\n   */\n  skipById(listTracks, id) {\n    return new Promise((resolve, reject) => {\n      const listTmp = listTracks.filter(a => a._id !== id);\n      resolve(listTmp);\n    });\n  }\n  /**\n   * //TODO {data:[..1,...2,..2]}\n   *\n   * @returns\n   */\n  getAllTracks$() {\n    return this.http.get(`${this.URL}/tracks`).pipe(map(({\n      data\n    }) => {\n      return data;\n    }));\n  }\n  /**\n   *\n   * @returns Devolver canciones random\n   */\n  getAllRandom$() {\n    return this.http.get(`${this.URL}/tracks`).pipe(mergeMap(({\n      data\n    }) => this.skipById(data, 2)),\n    // map((dataRevertida) => { //TODO aplicar un filter comun de array\n    //   return dataRevertida.filter((track: TrackModel) => track._id !== 1)\n    // })\n    catchError(err => {\n      const {\n        status,\n        statusText\n      } = err;\n      return of([]);\n    }));\n  }\n}\nTrackService.Éµfac = function TrackService_Factory(t) {\n  return new (t || TrackService)(i0.ÉµÉµinject(i1.HttpClient));\n};\nTrackService.Éµprov = /*@__PURE__*/i0.ÉµÉµdefineInjectable({\n  token: TrackService,\n  factory: TrackService.Éµfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["of","map","mergeMap","catchError","environment","TrackService","constructor","http","URL","api","skipById","listTracks","id","Promise","resolve","reject","listTmp","filter","a","_id","getAllTracks$","get","pipe","data","getAllRandom$","err","status","statusText","i0","ÉµÉµinject","i1","HttpClient","factory","Éµfac","providedIn"],"sources":["c:\\angular\\spotify\\src\\app\\modules\\tracks\\services\\track.service.ts"],"sourcesContent":["import { TrackModel } from '@core/models/tracks.model';\nimport { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, of } from 'rxjs';\nimport { map, mergeMap, tap, catchError } from 'rxjs/operators';\nimport { environment } from 'src/environments/environment';\n@Injectable({\n  providedIn: 'root'\n})\nexport class TrackService {\n  private readonly URL = environment.api\n\n  constructor(private http: HttpClient) {\n\n  }\n\n  /**\n   * \n   * @returns Devolver todas las canciones! molonas! ðŸ¤˜ðŸ¤˜\n   */\n\n  private skipById(listTracks: TrackModel[], id: number): Promise<TrackModel[]> {\n    return new Promise((resolve, reject) => {\n      const listTmp = listTracks.filter(a => a._id !== id)\n      resolve(listTmp)\n    })\n  }\n\n  /**\n   * //TODO {data:[..1,...2,..2]}\n   * \n   * @returns \n   */\n  getAllTracks$(): Observable<any> {\n    return this.http.get(`${this.URL}/tracks`)\n      .pipe(\n        map(({ data }: any) => {\n          return data\n        })\n      )\n  }\n\n\n  /**\n   * \n   * @returns Devolver canciones random\n   */\n  getAllRandom$(): Observable<any> {\n    return this.http.get(`${this.URL}/tracks`)\n      .pipe(\n        mergeMap(({ data }: any) => this.skipById(data, 2)),\n        // map((dataRevertida) => { //TODO aplicar un filter comun de array\n        //   return dataRevertida.filter((track: TrackModel) => track._id !== 1)\n        // })\n        catchError((err) => {\n          const { status, statusText } = err;\n          return of([])\n        })\n      )\n  }\n}"],"mappings":"AAGA,SAAqBA,EAAE,QAAQ,MAAM;AACrC,SAASC,GAAG,EAAEC,QAAQ,EAAOC,UAAU,QAAQ,gBAAgB;AAC/D,SAASC,WAAW,QAAQ,8BAA8B;;;AAI1D,OAAM,MAAOC,YAAY;EAGvBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFP,KAAAC,GAAG,GAAGJ,WAAW,CAACK,GAAG;EAItC;EAEA;;;;EAKQC,QAAQA,CAACC,UAAwB,EAAEC,EAAU;IACnD,OAAO,IAAIC,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAI;MACrC,MAAMC,OAAO,GAAGL,UAAU,CAACM,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,GAAG,KAAKP,EAAE,CAAC;MACpDE,OAAO,CAACE,OAAO,CAAC;IAClB,CAAC,CAAC;EACJ;EAEA;;;;;EAKAI,aAAaA,CAAA;IACX,OAAO,IAAI,CAACb,IAAI,CAACc,GAAG,CAAC,GAAG,IAAI,CAACb,GAAG,SAAS,CAAC,CACvCc,IAAI,CACHrB,GAAG,CAAC,CAAC;MAAEsB;IAAI,CAAO,KAAI;MACpB,OAAOA,IAAI;IACb,CAAC,CAAC,CACH;EACL;EAGA;;;;EAIAC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACjB,IAAI,CAACc,GAAG,CAAC,GAAG,IAAI,CAACb,GAAG,SAAS,CAAC,CACvCc,IAAI,CACHpB,QAAQ,CAAC,CAAC;MAAEqB;IAAI,CAAO,KAAK,IAAI,CAACb,QAAQ,CAACa,IAAI,EAAE,CAAC,CAAC,CAAC;IACnD;IACA;IACA;IACApB,UAAU,CAAEsB,GAAG,IAAI;MACjB,MAAM;QAAEC,MAAM;QAAEC;MAAU,CAAE,GAAGF,GAAG;MAClC,OAAOzB,EAAE,CAAC,EAAE,CAAC;IACf,CAAC,CAAC,CACH;EACL;;AAlDWK,YAAY,C;mBAAZA,YAAY,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAZ1B,YAAY,C;SAAZA,YAAY;EAAA2B,OAAA,EAAZ3B,YAAY,CAAA4B,IAAA;EAAAC,UAAA,EAFX;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}